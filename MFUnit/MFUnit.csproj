<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <AssemblyName>MFUnit</AssemblyName>
    <OutputType>Library</OutputType>
    <RootNamespace>MFUnit</RootNamespace>
    <ProjectTypeGuids>{b69e3092-b931-443c-abe7-7e7b65f2a37f};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <ProductVersion>9.0.21022</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{EC81132A-FCC6-4294-B60E-B62E4A908C43}</ProjectGuid>
    <TargetFrameworkVersion Condition="$(TargetFrameworkVersion) == ''">v4.3</TargetFrameworkVersion>
    <NetMfTargetsBaseDir Condition="'$(NetMfTargetsBaseDir)'==''">$(MSBuildExtensionsPath32)\Microsoft\.NET Micro Framework\</NetMfTargetsBaseDir>
    <!-- Take the target framework version and sanitize it for use with NuGet -->
    <NugetVersion>netmf$(TargetFrameworkVersion.Replace('.', '').Replace('v', ''))</NugetVersion>
    <!-- Override the standard obj directory so we don't get cache clashes -->
    <IntermediateOutputPath>obj\$(NugetVersion)\</IntermediateOutputPath>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\$(Configuration)\$(NugetVersion)\</OutputPath>
    <OutDir>$(OutputPath)</OutDir>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\$(Configuration)\$(NugetVersion)\</OutputPath>
    <OutDir>$(OutputPath)</OutDir>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <Import Project="$(NetMfTargetsBaseDir)$(TargetFrameworkVersion)\CSharp.Targets" />
  <ItemGroup>
    <Compile Include="Assert.cs" />
    <Compile Include="AssertException.cs" />
    <Compile Include="TestResult.cs" />
    <Compile Include="Interface\TestRunController.cs" />
    <Compile Include="Interface\TestRunView.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="TestApplication.cs" />
    <Compile Include="TestRun.cs" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Microsoft.SPOT.Graphics" />
    <Reference Include="Microsoft.SPOT.Hardware" />
    <Reference Include="Microsoft.SPOT.Native" />
    <Reference Include="Microsoft.SPOT.TinyCore" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\nina14.tinyfnt" />
  </ItemGroup>
  <Target Name="AfterBuild">
    <!--
      For reasons unknown invoking this target generates an MMP: error MMP0000: CLR_E_FAIL error on compile.
      I believe this might be because the MetaDataProcessor loads a v4.1 assembly into our AppDomain which causes us grief. 
      To get around this we will just shell out to MSBuild again.
    -->
    <!--<MSBuild Condition="'$(TargetFrameworkVersion)' != 'v4.2'" 
             Projects="$(MSBuildProjectFile)"
             Properties="TargetFrameworkVersion=v4.2;Configuration=$(Configuration);Platform=$(Platform)" />-->
    <Exec Condition="'$(TargetFrameworkVersion)' != 'v4.3'" Command="$(MSBuildBinPath)\msbuild.exe $(MSBuildProjectFile) /p:TargetFrameworkVersion=v4.3;Configuration=$(Configuration);Platform=$(Platform)" />
  </Target>
</Project>